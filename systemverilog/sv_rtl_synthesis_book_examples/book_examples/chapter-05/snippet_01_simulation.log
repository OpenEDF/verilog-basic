QuestaSim qverilog 10.2a Compiler 2013.03 Mar 15 2013
qverilog 5-x1_operator_rules.sv 
-- Compiling module op_rules_1
-- Compiling module op_rules_2
-- Compiling module op_rules_3
-- Compiling module op_rules_4
-- Compiling module op_rules_5
-- Compiling module op_rules_6
-- Compiling module op_rules_7

Top level modules:
	op_rules_1
	op_rules_2
	op_rules_3
	op_rules_4
	op_rules_5
	op_rules_6
	op_rules_7
+ C:\questa_sim_10.2a\win32/vsim -lib work op_rules_1 op_rules_2 op_rules_3 op_rules_4 op_rules_5 op_rules_6 op_rules_7 -c -do "run -all; quit -f" -appendlog -l qverilog.log -vopt
# vsim -appendlog -do {run -all; quit -f} -l qverilog.log -lib work -c -vopt op_rules_1 op_rules_2 op_rules_3 op_rules_4 op_rules_5 op_rules_6 op_rules_7 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# //  Questa Sim
# //  Version 10.2a win32 Mar 15 2013
# //
# //  Copyright 1991-2013 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //
# Loading sv_std.std
# Loading work.op_rules_1(fast)
# Loading work.op_rules_2(fast)
# Loading work.op_rules_3(fast)
# Loading work.op_rules_4(fast)
# Loading work.op_rules_5(fast)
# Loading work.op_rules_6(fast)
# Loading work.op_rules_7(fast)
# run -all 
#  
# op_rules_1: EXPECT: result is 0000
# op_rules_1: ACTUAL: result is 0000
#  
#  
# op_rules_2: EXPECT: result is 01xx
# op_rules_2: ACTUAL: result is 01xx
#  
#  
# op_rules_3: EXPECT: result is xxxx
# op_rules_3: ACTUAL: result is xxxx
#  
#  
# op_rules_4: EXPECT: result is 1
# op_rules_4: ACTUAL: result is 1
#  
#  
# op_rules_5: EXPECT: result is 0000000000000001
# op_rules_5: ACTUAL: result is 0000000000000001
#  
#  
# op_rules_6: EXPECT: $bits(a+b) is 16
# op_rules_6: ACTUAL: $bits(a+b) is 16
# op_rules_6: EXPECT: result is 000000000000000000001000
# op_rules_6: ACTUAL: result is 000000000000000000001000
#  
#  
# op_rules_7: EXPECT: $typename(a+b) is logic [15:0]
# op_rules_7: ACTUAL: $typename(a+b) is reg[15:0]
# op_rules_7: EXPECT: u1 is 0000000000000100
# op_rules_7: ACTUAL: u1 is 0000000000000100
#  
# op_rules_7: EXPECT: $typename(a+c) is logic [15:0]
# op_rules_7: ACTUAL: $typename(a+c) is reg[15:0]
# op_rules_7: EXPECT: u2 is 0000000000000000
# op_rules_7: ACTUAL: u2 is 0000000000000000
#  
# op_rules_7: EXPECT: $typename(c+d) is logic signed [15:0]
# op_rules_7: ACTUAL: $typename(c+d) is reg signed[15:0]
# op_rules_7: EXPECT: s1 is 1111111111111101
# op_rules_7: ACTUAL: s1 is 1111111111111101
#  
# op_rules_7: EXPECT: $typename(c+d+a) is logic [15:0]
# op_rules_7: ACTUAL: $typename(c+d+a) is reg[15:0]
# op_rules_7: EXPECT: s2 is 0000000000000001
# op_rules_7: ACTUAL: s2 is 1111111111111110
#  
#  quit -f 
