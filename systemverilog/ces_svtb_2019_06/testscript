#!/bin/csh -f
#

############################################################
#
#
# If you wish to run the dve GUI test,
# toggle the following variable to a "1":
#
set test_vcs_gui = 0

# vcs invocation test (on by default)
set test_vcs = 1

# verdi invocation test (on by default)
# set this to 0 if you do not have Verdi installed.
set test_verdi = 1

############################################################
# test script configuration
#
set Course_Name = "SVTB"
# This is used to check that the tool has the right version
set vcs_tool_version = "2019.06"
set verdi_tool_version = "Verdi_P-2019.06"
set vcs_shell = "vcs"
set vcs_gui = "dve"
set vcs_urg = "urg"
set verdi_gui = "verdi"

set last_update = "2019-06-24"

# This checksum is generated by using the following commands:
#
# unix$  setenv LC_ALL C
# unix$  unsetenv LANG
# unix$  find $dir_files_pattern -follow | sort | cksum
#
set dir_files_pattern = "./rtl ./labs ./solutions"
set dir_files_checksum = "1733100513 3001"

# This checksum is generated by using the following command:
#
# unix$  cat $content_pattern | cksum
#
set content_pattern = "rtl/*.v rtl/bad/*.v labs/*/* solutions/*/*"
set content_checksum = "2250954377 240203"

#
#
########################################################################

########################################################################
#
# Find the name of the testscript and cd into the directory
# containing the testscript
#
set thisFile=".testscript"
set installDir=`echo $0 | sed s/$thisFile//`
if("${installDir}" != "") cd $installDir
#
#
########################################################################
#
#
echo " "
echo " ******************************************************"
echo " Running the Synopsys Workshop Installation Test Script"
echo " "
echo "       Course Name:    $Course_Name"
echo "       VCS Version:    $vcs_tool_version"
echo "       Verdi Version:  $verdi_tool_version"
echo "       Last Update:    $last_update"
echo " ******************************************************"
echo ""
 
#run tests
#
# Clean up from previous test run by removing and recopying .test file
#
#

if (-e .test ) then
	rm -rf .test
endif
cp -r .testMaster .test

set RESULTFILE = results
set FULL_RESULTFILE = .test/results
echo $Course_Name > $FULL_RESULTFILE


# This makes sure that sort uses the traditional sort order - native byte values
setenv LC_ALL C
unsetenv LANG


# Test 1: Checking for critical files
#
echo " Running  Test 1 - installation integrity check"

# Create a directory listing to check that all necessary files are there
set dir_sum = `find $dir_files_pattern -follow | sort | cksum`
if ( "$dir_sum" == "$dir_files_checksum" ) then
    echo "Test 1a PASSED:   All files are installed "  >> $FULL_RESULTFILE
else
    echo "Test 1a ERROR :   There are files missing in the installation "
    echo ""
    echo "Test 1a FAILED:   There are files missing in the installation" >> $FULL_RESULTFILE
    echo ""  >> $FULL_RESULTFILE
endif

# Perform a content check on some files
set file_sum = `cat $content_pattern | cksum`
if ( "$file_sum" == "$content_checksum" ) then
    echo "Test 1b PASSED:   Files are consistent"  >> $FULL_RESULTFILE
else
    echo "Test 1b ERROR :   File consistency problems found"
    echo ""
    echo "Test 1b FAILED:   File consistency problems found" >> $FULL_RESULTFILE
    echo ""  >> $FULL_RESULTFILE
endif

# All remaining tests happen from ./.test
cd .test

# Test 2: Running vcs and Verdi Installation Test Script
#
echo " Running  Tests 2a,b,c - availability of VCS executables"

set tool_location = `which $vcs_shell`
which $vcs_shell | grep -w no >& /dev/null
if ( $status == 0 ) then
    echo "Test 2a ERROR :   Cannot locate $vcs_shell executable in current search path "
    echo ""
    echo "Test 2a FAILED:   Cannot locate $vcs_shell executable in current search path" >> $RESULTFILE
else
    echo "Test 2a PASSED:   Found $vcs_shell executable at $tool_location "  >> $RESULTFILE
endif

set tool_location = `which $vcs_gui`
which $vcs_gui | grep -w no >& /dev/null
if ( $status == 0 ) then
    echo "Test 2b ERROR :   Cannot locate $vcs_gui executable in current search path "
    echo ""
    echo "Test 2b FAILED:   Cannot locate $vcs_gui executable in current search path" >> $RESULTFILE
else
    echo "Test 2b PASSED:   Found $vcs_gui executable at $tool_location "  >> $RESULTFILE
endif


set tool_location = `which $vcs_urg`
which $vcs_urg | grep -w no >& /dev/null
if ( $status == 0 ) then
    echo "Test 2c ERROR :   Cannot locate $vcs_urg executable in current search path "
    echo ""
    echo "Test 2c FAILED:   Cannot locate $vcs_urg executable in current search path" >> $RESULTFILE
else
    echo "Test 2c PASSED:   Found $vcs_urg executable at $tool_location "  >> $RESULTFILE
endif

if ( $test_verdi == 1 ) then
    echo " Running  Test 2d - availability of verdi executables"
    set tool_location = `which $verdi_gui`
    which $verdi_gui | grep -w no >& /dev/null
    if ( $status == 0 ) then
        echo "Test 2d ERROR :   Cannot locate $verdi_gui executable in current search path "
        echo ""
        echo "Test 2d FAILED:   Cannot locate $verdi_gui executable in current search path" >> $RESULTFILE
    else
        echo "Test 2d PASSED:   Found $verdi_gui executable at $tool_location "  >> $RESULTFILE
    endif
endif
endif

# Test 3: Checking access to vcs and verdi
#
if ( $test_vcs != 1 ) then
  echo " Skipping Test 3a - vcs invocation test"
  echo "Test 3a  Skipped : not implemented" >> $RESULTFILE
  echo "" >> $RESULTFILE
else
  echo " Running  Test 3a - vcs invocation test"

  vcs -sverilog -ntb_opts svp -debug test.sv >! vcs.out
  grep dut ./vcs.out >& /dev/null
  if ( $status == 1 ) then
     echo "Test 3a  ERROR :   Could not invoke vcs"
     echo ""
     echo "" >> $RESULTFILE
     echo "Test 3a  FAILED:   vcs run failed" >> $RESULTFILE
     echo "" >> $RESULTFILE
  else
    grep ERROR ./vcs.out >& /dev/null
    if ( $status == 0 ) then
      echo "Test 3a  ERROR :   vcs compilation failed!"
      echo ""
      echo "" >> $RESULTFILE
      echo "Test 3a  FAILED:   vcs compilation failed" >> $RESULTFILE
      echo "" >> $RESULTFILE
    else
      grep $vcs_tool_version ./vcs.out >& /dev/null
      if ( $status == 1 ) then
        echo "Test 3a  WARNING :   You are not using the correct vcs version $vcs_tool_version"
        echo ""
        echo "" >> $RESULTFILE
        echo "Test 3a  FAILED:   vcs wrong version" >> $RESULTFILE
        echo "" >> $RESULTFILE
      else
         echo "Test 3a  PASSED:   vcs succeeded"  >> $RESULTFILE
      endif
    endif
  endif
endif

if ( $test_verdi != 1 ) then
  echo " Skipping Test 3b - verdi invocation test"
  echo "Test 3b  Skipped : not implemented" >> $RESULTFILE
  echo "" >> $RESULTFILE
else
  echo " Running  Test 3b - verdi invocation test"

  echo debExit >& verdi.cmd
  verdi -nogui -licedebug  -play verdi.cmd >& verdi.out
  grep -i "could not checkout verdi license" ./verdi.out >& /dev/null
  if ( $status == 0 ) then
    echo "Test 3b  ERROR :   Could not invoke Verdi!"
    echo ""
    echo "" >> $RESULTFILE
    echo "Test 3b  FAILED:   verdi invocation test failed" >> $RESULTFILE
    echo "" >> $RESULTFILE
  else
    grep $verdi_tool_version ./verdi.out >& /dev/null
    if ( $status == 1 ) then
      echo "Test 3b  WARNING :   You are not using the correct verdi version $verdi_tool_version"
      echo ""
      echo "" >> $RESULTFILE
      echo "Test 3b  FAILED:   verdi wrong version" >> $RESULTFILE
      echo "" >> $RESULTFILE
    else
       echo "Test 3b  PASSED:   verdi succeeded"  >> $RESULTFILE
    endif
  endif
endif

# Test 4: Checking vcs SystemVerilog simulation
#
if ( $test_vcs != 1 ) then
  echo " Skipping Test 4 - vcs SystemVerilog simulation test"
  echo "Test 4  Skipped : not implemented" >> $RESULTFILE
  echo "" >> $RESULTFILE
else
  echo " Running  Test 4 - vcs SystemVerilog simulation test"

  vcs -R -sverilog -debug router.test_top.sv router.v router.tb.sv router.if.sv >! vcs.out
  grep rtslicef ./vcs.out >& /dev/null
  if ( $status == 1 ) then
     echo "Test 4  ERROR :   Could not invoke vcs SystemVerilog compilation"
     echo ""
     echo "" >> $RESULTFILE
     echo "Test 4  FAILED:   vcs SystemVerilog invocation failed" >> $RESULTFILE
     echo "" >> $RESULTFILE
  else
    grep ERROR ./vcs.out >& /dev/null
    if ( $status == 0 ) then
      echo "Test 4  ERROR :   vcs SystemVerilog compilation failed!"
      echo ""
      echo "" >> $RESULTFILE
      echo "Test 4  FAILED:   vcs SystemVerilog compilation failed" >> $RESULTFILE
      echo "" >> $RESULTFILE
    else
      grep $vcs_tool_version ./vcs.out >& /dev/null
      if ( $status == 1 ) then
        echo "Test 4  WARNING :   You are not using the correct vcs version $vcs_tool_version"
        echo ""
        echo "" >> $RESULTFILE
        echo "Test 4  FAILED:   vcs wrong version" >> $RESULTFILE
        echo "" >> $RESULTFILE
      else
        grep "coverage = 100" ./vcs.out >& /dev/null
        if ( $status == 0 ) then
          echo "Test 4  PASSED:   vcs ntb succeeded"  >> $RESULTFILE
        else
          echo "Test 4  ERROR :   vcs SystemVerilog simulation failed!"
          echo ""
          echo "" >> $RESULTFILE
          echo "Test 4  FAILED:   vcs SystemVerilog simulation" >> $RESULTFILE
          echo "" >> $RESULTFILE
        endif
      endif
    endif
  endif
  rm -rf ./simv* ./csrc
endif

# Test 5: Checking VCS gui dve
#
if ( $test_vcs_gui != 1 ) then
  echo " Skipping Test 5 - GUI ($vcs_gui)"
  echo "Test 5  Skipped by user:   GUI ($vcs_gui) run skipped" >> $RESULTFILE
  echo "" >> $RESULTFILE
else
  echo " Running  Test 5 - GUI ($vcs_gui)"
  echo "To continue: perform File -> quit"

  $vcs_gui
  if ( $status == 1 ) then
    echo ""
    echo "Test 5  ERROR :   Something went wrong with the GUI ($vcs_gui) run"
    echo "" >> $RESULTFILE
    echo "Test 5  FAILED:   GUI ($vcs_gui) run failed" >> $RESULTFILE
    echo "" >> $RESULTFILE
  else
      echo "Test 5  PASSED:   $vcs_gui Invocation succeeded"  >> $RESULTFILE
  endif
endif

# results reporting
set RESULTS = `grep FAIL $RESULTFILE`
if ("${RESULTS}" != "") then
  echo "" >> $RESULTFILE
  echo "" >> $RESULTFILE
  echo "  *******************************************************" >> $RESULTFILE
  echo "  * Recommended Suggestions for Corrections of FAILURES *" >> $RESULTFILE
  echo "  *******************************************************" >> $RESULTFILE
  echo "" >> $RESULTFILE
  echo "  1. Be sure the class materials installed correctly.    " >> $RESULTFILE
  echo "" >> $RESULTFILE
  echo "  2. Be sure the vcs and verdi(if used in the labs) executables are in your path." >> $RESULTFILE
  echo "" >> $RESULTFILE
  echo ""
  echo " Installation Test FAILS for $Course_Name Course "
  echo " For details execute: cat .test/results"
  echo ""
  echo " Installation Test for $Course_Name Course FAILS on " `date` > ./installResults
else
  echo ""
  echo " Installation Test PASSED for $Course_Name Course"
  echo ""
  echo " Installation Test for $Course_Name Course PASSED on " `date` > ./installResults
  #cleanup
  rm -rf ./.test
endif

exit
